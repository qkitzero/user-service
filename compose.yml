services:
  user-server:
    build:
      context: .
      dockerfile: ./build/user/Dockerfile
    container_name: user-server
    restart: always
    environment:
      - PORT=${SERVER_CONTAINER_PORT}
      - DB_HOST=${DB_HOST}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_PORT=${DB_CONTAINER_PORT}
      - DB_SSL_MODE=${DB_SSL_MODE}
      - AUTH_SERVICE_HOST=${AUTH_SERVICE_HOST}
      - AUTH_SERVICE_PORT=${AUTH_SERVICE_PORT}
    depends_on:
      user-db:
        condition: service_healthy
    ports:
      - "${SERVER_HOST_PORT}:${SERVER_CONTAINER_PORT}"
    healthcheck:
      test: ["CMD", "grpc_health_probe", "-addr=localhost:${SERVER_CONTAINER_PORT}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  user-db:
    image: postgres:17
    container_name: user-db
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "${DB_HOST_PORT}:${DB_CONTAINER_PORT}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    volumes:
      - user-db-data:/var/lib/postgresql/data

  user-grpc-gateway:
    build:
      context: .
      dockerfile: ./build/gateway/Dockerfile
    container_name: user-grpc-gateway
    restart: always
    environment:
      - GRPC_GATEWAY_PORT=${GRPC_GATEWAY_CONTAINER_PORT}
      - SERVER_HOST=${SERVER_HOST}
      - SERVER_PORT=${SERVER_CONTAINER_PORT}
    ports:
      - "${GRPC_GATEWAY_HOST_PORT}:${GRPC_GATEWAY_CONTAINER_PORT}"

volumes:
  user-db-data: