// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/identity/identity.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/identity/identity.go -destination=mocks/domain/identity/mock_identity.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	identity "github.com/qkitzero/user-service/internal/domain/identity"
	gomock "go.uber.org/mock/gomock"
)

// MockIdentity is a mock of Identity interface.
type MockIdentity struct {
	ctrl     *gomock.Controller
	recorder *MockIdentityMockRecorder
	isgomock struct{}
}

// MockIdentityMockRecorder is the mock recorder for MockIdentity.
type MockIdentityMockRecorder struct {
	mock *MockIdentity
}

// NewMockIdentity creates a new mock instance.
func NewMockIdentity(ctrl *gomock.Controller) *MockIdentity {
	mock := &MockIdentity{ctrl: ctrl}
	mock.recorder = &MockIdentityMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdentity) EXPECT() *MockIdentityMockRecorder {
	return m.recorder
}

// ID mocks base method.
func (m *MockIdentity) ID() identity.IdentityID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(identity.IdentityID)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockIdentityMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockIdentity)(nil).ID))
}
