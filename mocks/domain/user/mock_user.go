// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/user/user.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/user/user.go -destination=mocks/domain/user/mock_user.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	identity "github.com/qkitzero/user-service/internal/domain/identity"
	user "github.com/qkitzero/user-service/internal/domain/user"
	gomock "go.uber.org/mock/gomock"
)

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
	isgomock struct{}
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// BirthDate mocks base method.
func (m *MockUser) BirthDate() user.BirthDate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BirthDate")
	ret0, _ := ret[0].(user.BirthDate)
	return ret0
}

// BirthDate indicates an expected call of BirthDate.
func (mr *MockUserMockRecorder) BirthDate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BirthDate", reflect.TypeOf((*MockUser)(nil).BirthDate))
}

// CreatedAt mocks base method.
func (m *MockUser) CreatedAt() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatedAt")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// CreatedAt indicates an expected call of CreatedAt.
func (mr *MockUserMockRecorder) CreatedAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatedAt", reflect.TypeOf((*MockUser)(nil).CreatedAt))
}

// DisplayName mocks base method.
func (m *MockUser) DisplayName() user.DisplayName {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisplayName")
	ret0, _ := ret[0].(user.DisplayName)
	return ret0
}

// DisplayName indicates an expected call of DisplayName.
func (mr *MockUserMockRecorder) DisplayName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisplayName", reflect.TypeOf((*MockUser)(nil).DisplayName))
}

// ID mocks base method.
func (m *MockUser) ID() user.UserID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(user.UserID)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockUserMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockUser)(nil).ID))
}

// Identities mocks base method.
func (m *MockUser) Identities() []identity.Identity {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Identities")
	ret0, _ := ret[0].([]identity.Identity)
	return ret0
}

// Identities indicates an expected call of Identities.
func (mr *MockUserMockRecorder) Identities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Identities", reflect.TypeOf((*MockUser)(nil).Identities))
}

// Update mocks base method.
func (m *MockUser) Update(displayName user.DisplayName) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", displayName)
}

// Update indicates an expected call of Update.
func (mr *MockUserMockRecorder) Update(displayName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUser)(nil).Update), displayName)
}

// UpdatedAt mocks base method.
func (m *MockUser) UpdatedAt() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatedAt")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// UpdatedAt indicates an expected call of UpdatedAt.
func (mr *MockUserMockRecorder) UpdatedAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatedAt", reflect.TypeOf((*MockUser)(nil).UpdatedAt))
}
